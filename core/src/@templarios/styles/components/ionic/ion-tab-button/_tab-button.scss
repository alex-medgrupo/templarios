ion-tab-button {
  --color: hsl(var(--med-color-neutral-5));
  --color-focused: hsl(var(--med-color-neutral-6));
  --color-selected: hsl(var(--med-color-brand-4));
  --background-focused-opacity: 0;

  justify-content: flex-start;

  @include breakpoint-up('lg') {
    justify-content: center;
  }

  ion-icon {
    stroke: var(--color);
    width: 24px;
    height: 24px;
  }

  ion-label {
    font-size: 10px;
    font-weight: 400;
    line-height: 12px;
    color: var(--color);
    margin: 4px 0 0 0;
  }

  .tp-tab-button {
    display: flex;
    flex-direction: column;
    align-items: center;

    @include breakpoint-up('lg') {
      flex-direction: row;

      ion-label {
        font-size: 12px;
        font-weight: 400;
        line-height: 12px;
        margin: 0 0 0 6px;
      }
    }
  }
}

// states
@media (any-hover: hover) {
  ion-tab-button:hover {
    ion-icon {
      stroke: var(--color-focused);
    }

    ion-label {
      color: var(--color-focused);
    }
  }
}

ion-tab-button.ion-focused {
  ion-icon {
    stroke: var(--color-focused);
  }

  ion-label {
    color: var(--color-focused);
  }
}

ion-tab-button.tab-selected {
  ion-icon {
    stroke: var(--color-selected);
  }

  ion-label {
    color: var(--color-selected);
  }
}

//
// color
//
@each $color in $tp-color {
  @for $i from 1 through 5 {
    @include generate-component-color(ion-tab-button, $color, $i) {
      --color-selected: #{tp-color($color, $i)};
    }
  }
}

//
// neutral
//
@for $i from 1 through 10 {
  @include generate-component-neutral(ion-tab-button, neutral-#{$i}, $i) {
    --color-selected: #{tp-neutral($i)};
  }
}
@for $i from 1 through 9 {
  @include generate-component-neutral(ion-tab-button, neutral-#{$i}#{5}, $i) {
    --color-selected: #{tp-neutral($i, 5)};
  }
}

//
// feedback
//
@each $color in $tp-feedback {
  @include generate-component-feedback(ion-tab-button, fb-#{$color}, $color) {
    --color-selected: #{tp-feedback($color)};
  }
}
